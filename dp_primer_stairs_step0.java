//問題URL：https://paiza.jp/works/mondai/dp_primer/dp_primer_stairs_step0

/* 
  整数 n が与えられます。
  階段を上るのに、1 歩で 1 段または 2 段を上ることができるとき、n 段の階段を上る方法は何通りあるでしょうか？

  (ヒント)
  これまでは問題文中に具体的な漸化式が書かれていましたが、この問題にはありません。自分で漸化式を立てる必要があります。

  部分問題として、1 ~ n-1 段の階段を上る方法が何通りあるか、という問題を考えてみましょう。
  この部分問題の答えが求まっているとして、n 段の階段を上る方法が何通りあるかを考えてみましょう。
  n 段目に到達するには、n-1 段目から1段上る方法と、n-2 段目から2段上る方法の2種類が考えられます。
  dp[n] を n 段の階段を上る方法の数とすれば、この関係は dp[n] = dp[n-1] + dp[n-2] で表すことが出来ます。
  よって、0段の階段を上る方法が1通り (何もしない) であることを踏まえると、以下のようにして答えを求めることが出来ます。

  dp[0] <- 1

  for i = 1 to n
    dp[i] <- 0
    if i >= 1 then
        dp[i] <- dp[i] + dp[i-1]    // i-1 段目から1段上って i 段へ到達
    if i >= 2 then
        dp[i] <- dp[i] + dp[i-2]    // i-2 段目から2段上って i 段へ到達

  print dp[n]

  このような場合分けをすると上で考察した漸化式を満たす配列が実現できます。
  (ピンとこなければ、i に具体的な値を入れて dp[i] がどのように計算されるのか、その処理を追ってみましょう) 
  この場合分けは今のところ冗長に見えますが、次の問題を解くときに活きてきます。
*/

import java.util.*;
public class dp_primer_stairs_step0 {
    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        
        //階段の 0段目からn段目まで、各段への登り方が何通りあるかを格納する配列
        int[] array = new int[n + 1];
        
        //0段目までに登る方法は一通り(何もしないの一択)
        array[0] = 1;
        
        //i段目までの登り方が何通りあるかを求める
        /*
            i段目まで登るには、「i-1段目から一段登る」or「i-2段目から二歩登る」の二通り
            なので、i段目まで登る方法は、
            「i-1段目まで登る方法の全通り」と「i-2段目まで登る方法の全通り」の和となる
        */
        for(int i = 1; i<=n; i++){
            array[i] = 0; //計算用の初期値

            if(i>=1){
                array[i] += array[i-1];
            }
            
            if(i>=2){
                array[i] += array[i-2];
            }
        }
        
        System.out.println(array[n]);

        sc.close();
    }
}
